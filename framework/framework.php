<?php
/**
 * _wpseed Framework - Do not edit this file.
 *
 * @package WordPress
 * @subpackage _wpseed
 * @since 0.1.0
 */

class _WPSEED {

    public $plugin_version =  _WPSEED_VERSION; 
    public $plugin_name = _WPSEED_PLUGIN_NAME;

    /**
     * Holds pages created by create_menu
     */
    public $menus = array();

    /**
     * Holds defined menus
     */
    public $pages = array();
    
    /**
     *  Holds defined tabs, sections and fields
     */
    public $options = array();

	/**
	 * Load Hooks
	 */
	function __construct() {
	    add_action('admin_enqueue_scripts', array(&$this,'admin_enqueue_scripts'));
	    add_action('admin_menu',array(&$this,'create_menus'));
	    add_action('admin_init', array(&$this,'create_settings'));
        add_filter('plugin_action_links', array(&$this,'plugin_action_links'), 10, 2);
	}
	 
    /**
     * Properly enqueue styles and scripts for our theme options page.
     *
     * This function is attached to the admin_enqueue_scripts action hook.
     *
     * @since  0.1.0
     * @param string $hook_suffix The name of the current page we are on.
     */
    function admin_enqueue_scripts( $hook_suffix ) {
        if(!in_array($hook_suffix, $this->pages))
            return;

    	wp_enqueue_script( 'seedprod-framework-js', _WPSEED_PLUGIN_URL . 'framework/settings-scripts.js', array( 'jquery' ), $this->plugin_version );
        wp_enqueue_style( 'thickbox' );
        wp_enqueue_style( 'media-upload' );
        wp_enqueue_style( 'farbtastic' ); 
    	wp_enqueue_style( 'seedprod-framework-css', _WPSEED_PLUGIN_URL . 'framework/settings-style.css', false, $this->plugin_version );
    }

    /**
     * Creates WordPress Menu pages from an array in the config file.
     *
     * This function is attached to the admin_menu action hook.
     *
     * @since 0.1
     */
    function create_menus(){
        foreach ($this->menus as $v) {
            if($v['type'] == 'add_submenu_page'){
                $this->pages[] = call_user_func_array($v['type'],array($v['parent_slug'],$v['page_name'],$v['menu_name'],$v['capability'],$v['menu_slug'],$v['callback']));
            }else{
                $this->pages[] = call_user_func_array($v['type'],array($v['page_name'],$v['menu_name'],$v['capability'],$v['menu_slug'],$v['callback'],$v['icon_url']));
            }
        }
    }

    /**
     * Display settings link on plugin page
     */
    function plugin_action_links($links, $file) {
        $plugin_file = '_wpseed/_wpseed.php';
        if ($file == $plugin_file) {
            $settings_link = '<a href="options-general.php?page=seedprod_coming_soon">Settings</a>';
            array_unshift($links,$settings_link);
        }
        return $links;
    }


    /**
     * Allow Tabs on the Settings Page
     *
     */
	function plugin_options_tabs() {
		$page = $_REQUEST['page'];
		$uses_tabs = false;
		$current_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : false;

        //Check if this config uses tabs
		foreach ($this->options as $v) {
			if($v['type'] == 'tab'){
				$uses_tabs = true;
			}
		}

        // If uses tabs then generate the tabs
		if($uses_tabs){
    		echo '<h2 class="nav-tab-wrapper" style="padding-left:20px">';
    		$c = 1;
    		foreach ($this->options as $v) {
        		if(isset($v['menu_slug']) ){
                     if($v['menu_slug'] == $page && $v['type'] == 'tab'){
        				$active = '';
        				if($current_tab){
        					$active = $current_tab == $v['id'] ? 'nav-tab-active' : '';
        				}elseif($c == 1){
        					$active = 'nav-tab-active';
        				}				
        				echo '<a class="nav-tab ' . $active . '" href="?page=' . $v['menu_slug'] . '&tab=' . $v['id'] . '">' . $v['label'] . '</a>';
        				$c++;	
        			}
        		}
    		}
    		echo '</h2>';
		}
	}

    /**
     * Render the option pages.
     *
     * @since 0.1.0
     */
    function option_page() {
        $page = $_REQUEST['page'];
    	?>
    	<div class="wrap columns-2 wpseed">
    	    <?php screen_icon(); ?>
    		<h2><?php echo $this->plugin_name; ?></h2>
			<?php $this->plugin_options_tabs(); ?>

            <form action="options.php" method="post">
    		<div id="poststuff">
                <div id="post-body" class="metabox-holder columns-2">
                    <div id="post-body-content" >
                            <?php
                            foreach ($this->options as $v) {
                                if(isset($v['menu_slug'])){
                                    if($v['menu_slug'] == $page){
                                        switch ($v['type']) {
											case 'tab';
												$tab = $v;
												if(empty($default_tab))
													$default_tab = $v['id'];
												break;
                                            case 'setting':
									
												$current_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : $default_tab;
												if($current_tab == $tab['id']){
                        				        	settings_fields($v['id']);
												}
                        				        break;
                        				    case 'section':
												$current_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : $default_tab;
												if($current_tab == $tab['id'] or $current_tab === false){	
                            				        echo '<div class="postbox seedprod-postbox"><div class="handlediv" title="Click to toggle"><br /></div>';
                                            		$this->wpseed_do_settings_sections($v['id']);
                                        		    echo '</div>';
												}
                                    		    break;
                    		    
                        		        }
                		            }
        		                }
                            }
                            ?>
                    	    
                    </div> <!-- #post-body-content -->
                    <div id="postbox-container-1" class="postbox-container">
                       
                            <div class="postbox support-postbox">
                                <div class="handlediv" title="Click to toggle"><br /></div>
                                <h3><span><?php _e('Plugin Support', '_wpseed') ?></span></h3>
                                <div class="inside">
                                    <div class="wpseed-widget">
                                    <input name="Submit" type="submit" value="<?php _e('Save Changes', '_wpseed') ?>" class="button-primary"/>
                                    </div>
                                </div>
                            </div><!-- end .postbox -->

              
                    </div> <!-- #postbox-container-1 -->
                </div> <!-- #post-body --> 
            </div> <!-- #poststuff --> 
            </form>  
    	</div> <!-- .wrap -->	
    	<?php
    }

    /**
     * Create the settings options, sections and fields via the WordPress Settings API
     *
     * This function is attached to the admin_init action hook.
     *
     * @since 0.1.0
     */
    function create_settings(){
        foreach ($this->options as $k) {
            switch ($k['type']) {
                case 'setting':
                    if(empty($k['validate_function'])){
            	        $k['validate_function'] = array(&$this,'validate_machine');
            	    }
                	register_setting(
                		$k['id'],
                		$k['id'],
                		$k['validate_function']
                	);
                	break;
            	case 'section':
            	    if(empty($k['desc_callback'])){
            	        $k['desc_callback'] = array(&$this,'__return_empty_string');
            	    }else{
            	        $k['desc_callback'] = array(&$this, $k['desc_callback']);
            	    }
                	add_settings_section(
                		$k['id'],
                		$k['label'],
                		$k['desc_callback'],
                		$k['id']
                	);
                	break;
				case 'tab':
					break;
            	default:
                	if(empty($k['callback'])){
            	        $k['callback'] = array(&$this,'field_machine');
            	    }
                	add_settings_field(
                		$k['id'],
                		$k['label'],
                		$k['callback'],
                		$k['section_id'],
                		$k['section_id'],
                		array('id' => $k['id'], 
                		'desc' => (isset($k['desc']) ? $k['desc'] : ''),
                		'setting_id' => $k['setting_id'], 
                		'class' => (isset($k['class']) ? $k['class'] : ''), 
                		'type' => $k['type'],
                		'default_value' => (isset($k['default_value']) ? $k['default_value'] : ''),
                		'option_values' => (isset($k['option_values']) ? $k['option_values'] : ''))
                	);
            	    
    	    }
        }
    }

    /**
     * Create a field based on the field type passed in.
     *
     * @since 0.1.0
     */
    function field_machine($args) {
        extract($args); //$id, $desc, $setting_id, $class, $type, $default_value, $option_values
         
    	$options = get_option( $setting_id );

        $path = _WPSEED_PLUGIN_PATH.'framework/field-types/'.$type.'.php';
        if(file_exists ( $path )){
            // Show Field
            include( $path );
            // Show description
            if(!empty($desc)){
                echo "<br>";
                echo "<small class='description'>{$desc}</small>";
            }
        }

    }

    /**
     * Validates user input before we save it via the Options API. If error add_setting_error
     *
     * @since 0.1.0
     * @param array $input Contains all the values submited to the POST.
     * @return array $input Contains sanitized values.
     * @todo Figure out best way to validate values.
     */
    function validate_machine($input) {

        foreach ($this->options as $k) {
            switch($k['type']){
                case 'setting':
                case 'section':
                case 'tab';
                    break;
                default:   
                    if(!empty($k['validate']) ){
                        $validation_rules = explode(',',$k['validate']);
                        foreach($validation_rules as $v){
                            $path = _WPSEED_PLUGIN_PATH.'framework/validations/'.$v.'.php';
                            if(file_exists ( $path )){
                                // Defaults Values
                                $is_valid = true;
                                $error_msg = '';

                                // Test Validation
                                require_once( $path );

                                // Is it valid?
                                if($is_valid === false){
                                    add_settings_error(
                                        $k['id'],
                                        'seedprod_error',
                                        $error_msg,
                                        'error'
                                    );
                                    // unset invalids
                                    unset($input[$k['id']]);
                                }

                            }
                        } //end foreach
        
                    }
    	    }
        }
        
    	return $input;
    }

    /**
     * Dummy function to be called by all sections from the Settings API. Define a custom function in the config.
     *
     * @since 0.1.0
     * @return string Empty
     */
    function __return_empty_string() {
    	echo '';
    }
    
  
    /**
    * SeedProd version of WP's do_settings_sections
    *
    * @since 0.1.0
    */
    function wpseed_do_settings_sections($page) {
     global $wp_settings_sections, $wp_settings_fields;

     if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )
        return;

        foreach ( (array) $wp_settings_sections[$page] as $section ) {
            echo "<h3>{$section['title']}</h3>\n";
            echo '<div class="inside">';
            call_user_func($section['callback'], $section);
            if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )
                continue;
            echo '<table class="form-table">';
            do_settings_fields($page, $section['id']);
            echo '</table>';
            echo '</div>';
        }
    }

}

// Instantiate class
$_wpseed = new _WPSEED();