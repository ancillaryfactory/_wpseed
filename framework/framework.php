<?php
/**
 * _wpseed Framework - Do not edit this file.
 *
 * @package WordPress
 * @subpackage _wpseed
 * @since 0.1.0
 */

class _WPSEED {

    public $plugin_version =  _WPSEED_VERSION; 
    public $plugin_name = _WPSEED_PLUGIN_NAME;

    /**
     * Holds pages created by create_menu
     */
    public $menus = array();

        /**
     * Holds defined menus
     */
    public $pages = array();
    
    /**
     *  Holds defined tabs, sections and fields
     */
    public $options = array();

	/**
	 * Load Hooks
	 */
	function __construct() {
	    add_action('admin_enqueue_scripts', array(&$this,'admin_enqueue_scripts'));
	    add_action('admin_menu',array(&$this,'create_menus'));
	    add_action('admin_init', array(&$this,'create_settings'));
	}
	 
    /**
     * Properly enqueue styles and scripts for our theme options page.
     *
     * This function is attached to the admin_enqueue_scripts action hook.
     *
     * @since  0.1.0
     * @param string $hook_suffix The name of the current page we are on.
     */
    function admin_enqueue_scripts( $hook_suffix ) {
        if(!in_array($hook_suffix, $this->pages))
            return;

        wp_enqueue_script( 'dashboard' );
    	wp_enqueue_script( 'seedprod-framework-js', _WPSEED_PLUGIN_URL . 'inc/js/setting-scripts.js', array( 'jquery','media-upload','thickbox','farbtastic' ), $this->plugin_version );
        wp_enqueue_style( 'thickbox' );
        wp_enqueue_style( 'farbtastic' ); 
    	wp_enqueue_style( 'seedprod-framework-css', _WPSEED_PLUGIN_URL . 'inc/css/settings-style.css', false, $this->plugin_version );
    }

    /**
     * Creates WordPress Menu pages from an array in the config file.
     *
     * This function is attached to the admin_menu action hook.
     *
     * @since 0.1
     */
    function create_menus(){
        foreach ($this->menus as $v) {
            if($v['type'] == 'add_submenu_page'){
                $this->pages[] = call_user_func_array($v['type'],array($v['parent_slug'],$v['page_name'],$v['menu_name'],$v['capability'],$v['menu_slug'],$v['callback']));
            }else{
                $this->pages[] = call_user_func_array($v['type'],array($v['page_name'],$v['menu_name'],$v['capability'],$v['menu_slug'],$v['callback'],$v['icon_url']));
            }
        }
    }

    /**
     * Allow Tabs on the Settings Page
     *
     */
	function plugin_options_tabs() {
		$page = $_REQUEST['page'];
		$uses_tabs = false;
		$current_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : false;

        //Check if this config uses tabs
		foreach ($this->options as $v) {
			if($v['type'] == 'tab'){
				$uses_tabs = true;
			}
		}

        // If uses tabs then generate the tabs
		if($uses_tabs){
    		echo '<h2 class="nav-tab-wrapper" style="padding-left:20px">';
    		$c = 1;
    		foreach ($this->options as $v) {
        		if(isset($v['menu_slug']) ){
                     if($v['menu_slug'] == $page && $v['type'] == 'tab'){
        				$active = '';
        				if($current_tab){
        					$active = $current_tab == $v['id'] ? 'nav-tab-active' : '';
        				}elseif($c == 1){
        					$active = 'nav-tab-active';
        				}				
        				echo '<a class="nav-tab ' . $active . '" href="?page=' . $v['menu_slug'] . '&tab=' . $v['id'] . '">' . $v['label'] . '</a>';
        				$c++;	
        			}
        		}
    		}
    		echo '</h2>';
		}
	}

    /**
     * Render the option pages.
     *
     * @since 0.1.0
     */
    function option_page() {
        $page = $_REQUEST['page'];
    	?>
    	<div class="wrap columns-2 wpseed">
    	    <?php screen_icon(); ?>
    		<h2><?php echo $this->plugin_name; ?></h2>
			<?php $this->plugin_options_tabs(); ?>

            <form action="options.php" method="post">
    		<div id="poststuff">
                <div id="post-body" class="metabox-holder columns-2">
                    <div id="post-body-content" >
                            <?php
                            foreach ($this->options as $v) {
                                if(isset($v['menu_slug'])){
                                    if($v['menu_slug'] == $page){
                                        switch ($v['type']) {
											case 'tab';
												$tab = $v;
												if(empty($default_tab))
													$default_tab = $v['id'];
												break;
                                            case 'setting':
									
												$current_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : $default_tab;
												if($current_tab == $tab['id']){
                        				        	settings_fields($v['id']);
												}
                        				        break;
                        				    case 'section':
												$current_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : $default_tab;
												if($current_tab == $tab['id'] or $current_tab === false){	
                            				        echo '<div class="postbox seedprod-postbox"><div class="handlediv" title="Click to toggle"><br /></div>';
                                            		$this->wpseed_do_settings_sections($v['id']);
                                        		    echo '</div>';
												}
                                    		    break;
                    		    
                        		        }
                		            }
        		                }
                            }
                            ?>
                    	    
                    </div> <!-- #post-body-content -->
                    <div id="postbox-container-1" class="postbox-container">
                       
                            <div class="postbox support-postbox">
                                <div class="handlediv" title="Click to toggle"><br /></div>
                                <h3><span><?php _e('Plugin Support', '_wpseed') ?></span></h3>
                                <div class="inside">
                                    <div class="wpseed-widget">
                                    <input name="Submit" type="submit" value="<?php _e('Save Changes', '_wpseed') ?>" class="button-primary"/>
                                    </div>
                                </div>
                            </div><!-- end .postbox -->

              
                    </div> <!-- #postbox-container-1 -->
                </div> <!-- #post-body --> 
            </div> <!-- #poststuff --> 
            </form>  
    	</div> <!-- .wrap -->	
    	<?php
    }

    /**
     * Create the settings options, sections and fields via the WordPress Settings API
     *
     * This function is attached to the admin_init action hook.
     *
     * @since 0.1.0
     */
    function create_settings(){
        foreach ($this->options as $k) {
            switch ($k['type']) {
                case 'setting':
                    if(empty($k['validate_function'])){
            	        $k['validate_function'] = array(&$this,'validate_machine');
            	    }
                	register_setting(
                		$k['id'],
                		$k['id'],
                		$k['validate_function']
                	);
                	break;
            	case 'section':
            	    if(empty($k['desc_callback'])){
            	        $k['desc_callback'] = array(&$this,'__return_empty_string');
            	    }else{
            	        $k['desc_callback'] = array(&$this, $k['desc_callback']);
            	    }
                	add_settings_section(
                		$k['id'],
                		$k['label'],
                		$k['desc_callback'],
                		$k['id']
                	);
                	break;
				case 'tab':
					break;
            	default:
                	if(empty($k['callback'])){
            	        $k['callback'] = array(&$this,'field_machine');
            	    }
                	add_settings_field(
                		$k['id'],
                		$k['label'],
                		$k['callback'],
                		$k['section_id'],
                		$k['section_id'],
                		array('id' => $k['id'], 
                		'desc' => (isset($k['desc']) ? $k['desc'] : ''),
                		'setting_id' => $k['setting_id'], 
                		'class' => (isset($k['class']) ? $k['class'] : ''), 
                		'type' => $k['type'],
                		'default_value' => (isset($k['default_value']) ? $k['default_value'] : ''),
                		'option_values' => (isset($k['option_values']) ? $k['option_values'] : ''))
                	);
            	    
    	    }
        }
    }

    /**
     * Create a field based on the field type passed in.
     *
     * @since 0.1.0
     */
    function field_machine($args) {
        extract($args);
    	$options = get_option( $setting_id );
    	switch($type){
    	    case 'textbox':
    	        echo "<input id='$id' class='".(empty($class) ? 'regular-text' : $class)."' name='{$setting_id}[$id]' type='text' value='".esc_attr(empty($options[$id]) ? $default_value : $options[$id])."' />
    	        <br><small class='description'>".(empty($desc) ? '' : $desc)."</small>";
    	        break;
            case 'image':
    	        echo "<input id='$id' class='".(empty($class) ? 'regular-text' : $class)."' name='{$setting_id}[$id]' type='text' value='".(empty($options[$id]) ? $default_value : $options[$id])."' />
    	        <input id='{$id}_upload_image_button' class='button-secondary upload-button' type='button' value='". __('Media Image Library', 'ultimate-coming-soon-page')."' />
    	        <br><small class='description'>".(empty($desc) ? '' : $desc)."</small>
                


    	        ";
    	        break;
    	    case 'select':
        	    echo "<select id='$id' class='".(empty($class) ? '' : $class)."' name='{$setting_id}[$id]'>";
				foreach($option_values as $k=>$v){
        	        if(preg_match("/optgroupend/i",$k)){
        	            echo "</optgroup>";
        	        }else{
        	            if(preg_match("/optgroup/i",$k)){
            	            echo "<optgroup label='$v'>";
            	        }else{
							
            	            if(preg_match("/empty/i",$k) && empty($default_value)){             
            	                echo "<option value=''>$v</option>";
            	            }else{
        	                    echo "<option value='$k' ".((preg_match("/empty/i",$options[$id] || isset($options[$id]) === false) ? $default_value : $options[$id]) == $k ? 'selected' : '').">$v</option>";
    	                    }
    	                }
    	            }

        	    }
        	    echo "</select>
                <br><small class='description'>".(empty($desc) ? '' : $desc)."</small>";
                break;
    	    case 'textarea':
                echo "<textarea id='$id' class='".(empty($class) ? '' : $class)."' name='{$setting_id}[$id]'>".(empty($options[$id]) ? $default_value : $options[$id])."</textarea>
    	        <br><small class='description'>".(empty($desc) ? '' : $desc)."</small>";
    	        break;
    	    case 'radio':
    	        foreach($option_values as $k=>$v){
    	            echo "<input type='radio' name='{$setting_id}[$id]' value='$k'".((empty($options[$id]) ? $default_value : $options[$id]) == $k ? 'checked' : '')."  /> $v<br/>";
                }
    	        echo "<small class='description'>".(empty($desc) ? '' : $desc)."</small>";
    	        break;
    	    case 'checkbox':
    	        $count = 0;
    	        foreach($option_values as $k=>$v){
    	            echo "<input type='checkbox' name='{$setting_id}[$id][]' value='$k'".(in_array($k,(empty($options[$id]) ? (empty($default_value) ? array(): $default_value) : $options[$id])) ? 'checked' : '')."  /> $v<br/>";
                    $count++;
                }
    	        echo "<small class='description'>".(empty($desc) ? '' : $desc)."</small>";
    	        break;
    	    case 'color':
    	        echo "
        	        <input id='$id' type='text' name='{$setting_id}[$id]' value='".(empty($options[$id]) ? $default_value : $options[$id])."' style='background-color:".(empty($options[$id]) ? $default_value : $options[$id]).";' />
                    <input type='button' class='pickcolor button-secondary' value='Select Color'>
                    <div id='colorpicker' style='z-index: 100; background:#eee; border:1px solid #ccc; position:absolute; display:none;'></div>
                    <br />
                    <small class='description'>".(empty($desc) ? '' : $desc)."</small>
                    ";
    	        break;
    	}

    }

    /**
     * Validates user input before we save it via the Options API. If error add_setting_error
     *
     * @since 0.1.0
     * @param array $input Contains all the values submited to the POST.
     * @return array $input Contains sanitized values.
     * @todo Figure out best way to validate values.
     */
    function validate_machine($input) {
        $error = false;
        var_dump($input);
        foreach ($this->options as $k) {
            switch($k['type']){
                case 'setting':
                    break;
                case 'section':
                    break;
                default:
                    // Validate a pattern
                    if(isset($pattern) && $pattern){
                	    if(!preg_match( $pattern, $input[$k['id']])) {
                	        $error = true;
                    		add_settings_error(
                    			$k['id'],
                    			'seedprod_error',
                    			$k['error_msg'],
                    			'error'
                    		);
                    		unset($input[$k['id']]);
                    	}		
                    }
                    // Sanitize 
            	    if($k['type'] == 'image'){
            	        $input[$k['id']] = esc_url_raw($input[$k['id']]);
            	    }
    	    }
        }
        if(!$error){
        	global $wp_settings_errors;
        	$display = true;
        	if(!empty($wp_settings_errors)){
        		foreach($wp_settings_errors as $k=>$v){
        			if($v['code'] == 'seedprod_settings_updated')
        				$display = false;
        		}
        	}
	       if($display)
            	add_settings_error('general', 'seedprod_settings_updated', sprintf(__("Settings saved.  <a href='%s/?cs_preview=true'>Preview &raquo;</a>", 'ultimate-coming-soon-page'),home_url()), 'updated');
        }

    	return $input;
    }

    /**
     * Dummy function to be called by all sections from the Settings API. Define a custom function in the config.
     *
     * @since 0.1.0
     * @return string Empty
     */
    function __return_empty_string() {
    	echo '';
    }
    
  
    /**
    * SeedProd version of WP's do_settings_sections
    *
    * @since 0.1.0
    */
    function wpseed_do_settings_sections($page) {
     global $wp_settings_sections, $wp_settings_fields;

     if ( !isset($wp_settings_sections) || !isset($wp_settings_sections[$page]) )
        return;

        foreach ( (array) $wp_settings_sections[$page] as $section ) {
            echo "<h3>{$section['title']}</h3>\n";
            echo '<div class="inside">';
            call_user_func($section['callback'], $section);
            if ( !isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']]) )
                continue;
            echo '<table class="form-table">';
            do_settings_fields($page, $section['id']);
            echo '</table>';
            echo '</div>';
        }
    }

}

// i=Instantiate class
$_wpseed = new _WPSEED();